# CI/CD for Github Actions
# @author Denis Zholob (deniszholob.com)
# ====================================== #

name: Build Test Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  # pull_request:
  #   branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # ========================================================================== #
  # ========================================================================== #
  get-release-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.0'

      - name: Set RELEASE_VERSION env var
        run: node -pe "require('./package.json').version" > RELEASE_VERSION.txt

      - name: Archive RELEASE_VERSION
        uses: actions/upload-artifact@v2
        with:
          name: RELEASE_VERSION
          path: RELEASE_VERSION.txt

  # ========================================================================== #
  # ========================================================================== #
  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.0'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install NPM Dependencies
        run: npm run i

      - name: Cache Nx
        uses: actions/cache@v2
        with:
          path: node_modules/.cache/nx
          key: cache-nx-${{ hashFiles('package-lock.json') }}-build-web-${{ github.sha }}
          restore-keys: |
            cache-nx-${{ hashFiles('package-lock.json') }}-

      - name: Build
        run: npm run build:web

      # Save dist artifacts for deployment jobs
      # https://docs.github.com/en/actions/learn-github-actions/essential-features-of-github-actions#sharing-data-between-jobs
      - name: Archive web demo build
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: web-demo-build
          path: dist/apps/web # Directory to push to GitHub Pages

  # ========================================================================== #
  # ========================================================================== #
  build-windows:
    runs-on: windows-latest
    needs: [get-release-version, build-web]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.0'

      - name: Download RELEASE_VERSION
        uses: actions/download-artifact@v2
        with:
          name: RELEASE_VERSION

      - name: Set RELEASE_VERSION env var
        shell: bash
        run: |
          echo "RELEASE_VERSION=`cat RELEASE_VERSION.txt`" >> $GITHUB_ENV

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{runner.os}}-${{env.cache-name}}-${{hashFiles('**/package-lock.json')}}

      - name: Install NPM Dependencies
        run: npm run i

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: web-demo-build
          path: dist/apps/web

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist/apps/web

      - name: Build Windows Package
        run: npm run build:electron && npm run electron:make

      - name: Display structure of built files
        run: ls -R
        working-directory: dist/executables

      - name: Zip Release
        uses: papeloto/action-zip@v1
        with:
          files: dist/executables/win-unpacked/
          dest: Playlist Maker ${{env.RELEASE_VERSION}}.zip

      - name: Archive electron app build
        # if: github.event == 'push' && success()
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: release-package-${{env.RELEASE_VERSION}}
          path: |
            dist/executables/Playlist Maker Setup ${{env.RELEASE_VERSION}}.exe
            ./Playlist Maker ${{env.RELEASE_VERSION}}.zip
          if-no-files-found: error

  # ========================================================================== #
  # Ref: https://focisolutions.com/2020/04/github-actions-deploying-an-angular-app/
  # ========================================================================== #
  deploy-web:
    runs-on: ubuntu-latest
    needs: build-web
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: web-demo-build
          path: web-demo-build

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: web-demo-build

      # ---------------------------- Deployment ------------------------------ #
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          BRANCH: gh-pages
          FOLDER: web-demo-build

  # ========================================================================== #
  # Ref: https://github.com/actions/create-release
  # ========================================================================== #
  release:
    # if: github.event == 'push'
    runs-on: ubuntu-latest
    needs: [get-release-version, build-windows]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.0'

      - name: Download RELEASE_VERSION
        uses: actions/download-artifact@v2
        with:
          name: RELEASE_VERSION

      - name: Set RELEASE_VERSION env var
        shell: bash
        run: |
          echo "RELEASE_VERSION=`cat RELEASE_VERSION.txt`" >> $GITHUB_ENV

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: release-package-${{env.RELEASE_VERSION}}
          path: release-package-${{env.RELEASE_VERSION}}

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release-package-${{env.RELEASE_VERSION}}

      # -------------------------- Release ----------------------------------- #
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Playlist Maker v${{env.RELEASE_VERSION}}
          tag: v${{env.RELEASE_VERSION}}
          body: |
            [<img src="https://github.com/deniszholob/playlist-maker/raw/main/screenshots/playlist-maker-download.png" width="200" />](https://github.com/deniszholob/playlist-maker/releases/download/v${{env.RELEASE_VERSION}}/Playlist.Maker.Setup.${{env.RELEASE_VERSION}}.exe)
            Double click to install and run.

            ## If you want a "portable"/non-installable node-version
            * Download the [Playlist.Maker.${{env.RELEASE_VERSION}}.zip](https://github.com/deniszholob/playlist-maker/releases/download/v${{env.RELEASE_VERSION}}/Playlist.Maker.${{env.RELEASE_VERSION}}.zip)
            * Extract the contents into a new folder
            * Inside the folder double click on the .exe file in the new extracted  folder.

            > Note: Chrome will say its a dangerous file
            > Note: Windows will warn its from an unknown publisher
            > Note: Antivirus will probably alert and scan for a couple seconds, it does for me.
          artifacts: |
            release-package-${{env.RELEASE_VERSION}}/dist/executables/Playlist Maker Setup ${{env.RELEASE_VERSION}}.exe,
            release-package-${{env.RELEASE_VERSION}}/Playlist Maker ${{env.RELEASE_VERSION}}.zip
          artifactErrorsFailBuild: true
          draft: false # true to create a draft (unpublished) release, false to create a published one. Default: false
